name: Build ClassifiedCoreKit

on:
  push:
    branches: [ main ]
    paths:
      - 'ClassifiedCoreKit/**'
      - 'ClassifiedList.xcodeproj/**'
      - '.github/workflows/build-corekit.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'ClassifiedCoreKit/**'
      - 'ClassifiedList.xcodeproj/**'
      - '.github/workflows/build-corekit.yml'
  workflow_dispatch:

jobs:
  build:
    name: Build ClassifiedCoreKit Framework
    runs-on: macos-latest

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3

    - name: Set up Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: 'latest-stable'
    
    - name: Debug Xcode and Project Info
      run: |
        xcodebuild -version
        xcodebuild -list -project ClassifiedList.xcodeproj
        
    - name: Build ClassifiedCoreKit Framework
      run: |
        xcodebuild clean build \
          -project ClassifiedList.xcodeproj \
          -scheme ClassifiedCoreKit \
          -destination "platform=macOS" \
          -configuration Release \
          CODE_SIGNING_ALLOWED=NO
    
    - name: Debug Build Output
      run: |
        echo "Looking for Build Products directory structure:"
        find ~/Library/Developer/Xcode/DerivedData -name "ClassifiedList*" -type d
        echo "\nLooking for the framework:"
        find ~/Library/Developer/Xcode/DerivedData -name "ClassifiedCoreKit.framework" -type d

    - name: Get Release Build Directory
      id: build-dir
      run: |
        BUILD_DIR=$(xcodebuild -project ClassifiedList.xcodeproj -scheme ClassifiedCoreKit -configuration Release -showBuildSettings | grep -m 1 "BUILT_PRODUCTS_DIR" | awk '{print $3}')
        echo "BUILD_DIR=$BUILD_DIR" >> $GITHUB_ENV
        echo "Build directory is: $BUILD_DIR"
        
        # Create directory if it doesn't exist (to avoid ls errors)
        mkdir -p "$BUILD_DIR" || true
        
        echo "Contents of parent directory:"
        ls -la "$(dirname "$BUILD_DIR")"

    - name: Verify Framework Structure
      run: |
        if [ -d "$BUILD_DIR/ClassifiedCoreKit.framework" ]; then
          echo "Framework found at $BUILD_DIR/ClassifiedCoreKit.framework"
          ls -la "$BUILD_DIR/ClassifiedCoreKit.framework"
        else
          echo "Framework not found at expected location: $BUILD_DIR/ClassifiedCoreKit.framework"
          echo "Searching for it elsewhere:"
          find ~/Library/Developer/Xcode/DerivedData -name "ClassifiedCoreKit.framework" -type d
        fi
    
    - name: Create Test Script
      run: |
        cat > test_framework.swift << EOF
        import Foundation
        import ClassifiedCoreKit
        
        let category = CoreCategory(id: 1, name: "Test Category")
        print("Created category: id=\(category.id), name=\(category.name)")
        
        if let url = URL(string: "https://example.com") {
            let endpoint = CoreEndpoint(url: url)
            print("Created endpoint with URL: \(endpoint.url)")
        }
        EOF
        
    - name: Run Basic Test
      run: |
        if [ -d "$BUILD_DIR/ClassifiedCoreKit.framework" ]; then
          swift -F "$BUILD_DIR" test_framework.swift
        else
          echo "Cannot run test as framework was not found"
          FRAMEWORK_PATH=$(find ~/Library/Developer/Xcode/DerivedData -name "ClassifiedCoreKit.framework" -type d | head -1)
          if [ ! -z "$FRAMEWORK_PATH" ]; then
            echo "Trying with found framework at: $FRAMEWORK_PATH"
            swift -F "$(dirname "$FRAMEWORK_PATH")" test_framework.swift
          fi
        fi 