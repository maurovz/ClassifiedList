name: Build ClassifiedCoreKit

on:
  push:
    branches: [ main ]
    paths:
      - 'ClassifiedCoreKit/**'
      - 'ClassifiedList.xcodeproj/**'
      - '.github/workflows/build-corekit.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'ClassifiedCoreKit/**'
      - 'ClassifiedList.xcodeproj/**'
      - '.github/workflows/build-corekit.yml'
  workflow_dispatch:

jobs:
  build:
    name: Build ClassifiedCoreKit Framework
    runs-on: macos-latest

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3

    - name: Set up Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: 'latest-stable'
    
    - name: Debug Xcode and Project Info
      run: |
        xcodebuild -version
        xcodebuild -list -project ClassifiedList.xcodeproj
        
    - name: Build ClassifiedCoreKit Framework
      run: |
        xcodebuild clean build \
          -project ClassifiedList.xcodeproj \
          -scheme ClassifiedCoreKit \
          -destination "platform=macOS" \
          -configuration Release \
          CODE_SIGNING_ALLOWED=NO \
          SYMROOT=./build
    
    - name: Locate and Examine Framework
      run: |
        echo "Looking for framework in the build directory:"
        find ./build -name "ClassifiedCoreKit.framework" -type d
        
        FRAMEWORK_PATH=$(find ./build -name "ClassifiedCoreKit.framework" -type d | head -1)
        
        if [ -z "$FRAMEWORK_PATH" ]; then
          echo "Framework not found in build directory"
          exit 1
        fi
        
        echo "Found framework at: $FRAMEWORK_PATH"
        ls -la "$FRAMEWORK_PATH"
        
        echo "Framework binary info:"
        file "$FRAMEWORK_PATH/ClassifiedCoreKit"
        
        echo "Framework architectures:"
        lipo -info "$FRAMEWORK_PATH/ClassifiedCoreKit" || echo "Not a universal binary"
        
        echo "Framework symbols:"
        nm -gU "$FRAMEWORK_PATH/ClassifiedCoreKit" | grep ClassifiedCoreKit || echo "No public symbols found"
        
        echo "Framework install name:"
        otool -L "$FRAMEWORK_PATH/ClassifiedCoreKit" | grep ClassifiedCoreKit
        
        echo "FRAMEWORK_PATH=$FRAMEWORK_PATH" >> $GITHUB_ENV
        echo "FRAMEWORK_DIR=$(dirname "$FRAMEWORK_PATH")" >> $GITHUB_ENV
    
    - name: Static Verification of Framework
      run: |
        if [ -d "$FRAMEWORK_PATH" ]; then
          # Create directory for frameworks
          mkdir -p ~/Library/Frameworks/
          
          # Copy framework to a standard location
          cp -R "$FRAMEWORK_PATH" ~/Library/Frameworks/
          
          # Create a simple test file
          echo 'import ClassifiedCoreKit' > verify.swift
          echo 'print("Framework verified!")' >> verify.swift
          
          # Try to compile it - this verifies the framework structure without running
          swiftc -F ~/Library/Frameworks verify.swift -o verify_static
          
          echo "✅ Framework can be statically linked"
        else
          echo "❌ Framework not found"
          exit 1
        fi
    
    - name: Dynamic Verification of Framework
      run: |
        if [ -d "$FRAMEWORK_PATH" ]; then
          # Approach 1: Use env var to locate framework
          echo "import ClassifiedCoreKit; print(\"Framework successfully imported\")" > test_env.swift
          swiftc -F "$FRAMEWORK_DIR" test_env.swift -o test_env
          DYLD_FRAMEWORK_PATH="$FRAMEWORK_DIR" ./test_env && echo "✅ Dynamic linking with DYLD_FRAMEWORK_PATH works"
          
          # Approach 2: Embed runtime path in the binary
          echo "import ClassifiedCoreKit; print(\"Framework successfully imported\")" > test_rpath.swift
          swiftc -F "$FRAMEWORK_DIR" -Xlinker -rpath -Xlinker "$FRAMEWORK_DIR" test_rpath.swift -o test_rpath
          ./test_rpath && echo "✅ Dynamic linking with embedded @rpath works"
        else
          echo "❌ Framework not found"
          exit 1
        fi 